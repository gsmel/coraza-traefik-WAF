# Enable rule engine
SecRuleEngine On

# Set default action
SecDefaultAction "phase:2,deny,status:403,log"

# Basic security rules
SecRule REQUEST_HEADERS:User-Agent "@rx (?i)(curl|wget|python|ruby|perl)" \
    "id:1000,phase:1,deny,status:403,msg:'Suspicious User Agent'"

SecRule REQUEST_HEADERS:Content-Type "!@rx ^(?:application/x-www-form-urlencoded|multipart/form-data|application/json)$" \
    "id:1001,phase:1,deny,status:403,msg:'Invalid Content-Type'"

# SQL Injection protection
SecRule ARGS|ARGS_NAMES|REQUEST_COOKIES|REQUEST_COOKIES_NAMES|REQUEST_BODY|REQUEST_HEADERS \
    "@rx (?i:(?:select|insert|update|delete|union|create|drop|alter).*(?:from|table|database))" \
    "id:1002,phase:2,deny,status:403,msg:'SQL Injection Attempt'"

# XSS protection
SecRule ARGS|ARGS_NAMES|REQUEST_COOKIES|REQUEST_COOKIES_NAMES|REQUEST_HEADERS \
    "@rx (?i:<script.*?>|<.*?javascript:|<.*?onload=|<.*?onclick=)" \
    "id:1003,phase:2,deny,status:403,msg:'XSS Attempt'"

# File inclusion protection
SecRule ARGS|ARGS_NAMES|REQUEST_COOKIES|REQUEST_COOKIES_NAMES \
    "@rx (?i:\.\.\/|\.\.\\|\/etc\/passwd|c:\\windows)" \
    "id:1004,phase:2,deny,status:403,msg:'Path Traversal Attempt'"

# Command injection protection
SecRule ARGS|ARGS_NAMES|REQUEST_COOKIES|REQUEST_COOKIES_NAMES|REQUEST_HEADERS \
    "@rx (?i:(?:;|\||`|\$\(|\$\{).*(?:wget|curl|bash|cmd|powershell))" \
    "id:1005,phase:2,deny,status:403,msg:'Command Injection Attempt'"

# Log all transactions
SecAuditEngine RelevantOnly
SecAuditLog /var/log/coraza/audit.log
SecAuditLogParts ABCFHZ
